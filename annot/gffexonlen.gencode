#!/usr/bin/python

import argparse
import os
import pickle
import numpy

from ansi import error
import delim
import ranges
import pandas as pd

parser = argparse.ArgumentParser(
    prog = 'annot: gffexonlen',
    description = 'count exon lengths'
)

parser.add_argument('fname', type = str,
                    help = 'input file, gff file (can be gzipped)')
parser.add_argument('-z', default = False, action = 'store_true', dest = 'gzipped',
                    help = 'explicitly specify whether the file is zipped archive')

params = parser.parse_args()
search_sat_name = params.fname.rstrip('.gz') + '.sat'
search_sac_name = params.fname.rstrip('.gz') + '.sac'
search_hierarchy_name = params.fname.rstrip('.gz') + '.hierarchy'

if params.fname.endswith('gz'):
    params.gzipped = True

if not (os.path.exists(search_sat_name) and
        os.path.exists(search_sac_name) and
        os.path.exists(search_hierarchy_name)):
    error('gff indices not complete. run gffindex first.')

with open(search_sat_name, 'rb') as f:
    sat = pickle.load(f)
with open(search_hierarchy_name, 'rb') as f:
    hier = pickle.load(f)

pass

# ../refseq/9606/genomic.gff.gz

genes = {}; i = 0
print(sat.keys())
for g in hier['gene']:

    i += 1; print('\r{0} of {1}'.format(i, len(hier['gene'])), end = '')

    gid = g['id']
    gname = sat['gene_id'][gid]
    
    # by now we don't resolve the problem where genes may have the same symbol.
    # these genes with the same name can be located on different chromosomes,
    # and this is not resolved by our ranges.merge() function and produces an error.

    # if gname in genes.keys():
    #     pass # why
    # else:

    genes[gname] = []

    for transcript_name in g.keys():
        if transcript_name == 'id': continue
        elif transcript_name == 'transcript':

            prim_exons = []

            for transc in g['transcript']:
                for prods in transc.keys():
                    if prods == 'exon': prim_exons += [transc['exon']]
                    elif prods == 'id': continue

            genes[gname] += prim_exons

table = {
    'symbol': [],
    'mean': [],
    'median': [],
    'merged': []
}

exon_ranges = {}

i = 0
for g in genes.keys():

    i += 1; print('\r{0} of {1}'.format(i, len(genes)), end = '')
    exons = [] # list of ranges.range
    
    for ex in genes[g]:
        exon = []

        for subrange in ex:

            subkey = subrange['id']
            exon += [(
                int(sat['.start'][subkey]),
                int(sat['.end'][subkey])
            )]
        
        exons += [
            ranges.dedup(ranges.range(exon, sat['.seqid'][subkey]))
        ]
    
    exon_ranges[g] = exons

i = 0
for g in exon_ranges.keys():

    exons = exon_ranges[g]
    i += 1; print('\r{0} of {1}'.format(i, len(exon_ranges)), end = '')

    if len(exons) == 0:
        table['symbol'] += [g]
        table['mean'] += [0]
        table['median'] += [0]
        table['merged'] += [0]
    
    elif len(exons) == 1:
        table['symbol'] += [g]
        table['mean'] += [ranges.length(exons[0])]
        table['median'] += [ranges.length(exons[0])]
        table['merged'] += [ranges.length(exons[0])]
    
    else:

        table['symbol'] += [g]
        lens = []
        merged = ranges.merge(exons[0], exons[1])
        for x in range(2, len(exons)):
            merged = ranges.merge(merged, exons[x])
        
        for x in range(len(exons)):
            lens += [ranges.length(exons[x])]

        table['mean'] += [numpy.mean(lens)]
        table['median'] += [numpy.median(lens)]
        table['merged'] += [ranges.length(merged)]

pdf = pd.DataFrame(table)
pdf.to_csv(params.fname.rstrip('.gz') + '.exonlens', sep = '\t', index = True)

print('')
print('finished.')

#!/usr/bin/python

import argparse
import pandas as pd

import fq
from ansi import error

parser = argparse.ArgumentParser(
    prog = 'fq: fqcut',
    description = 'cut a substring of the original fastq file'
)

parser.add_argument('fname', type = str,
                    help = 'input file, fastq file (can be gzipped).')
parser.add_argument('oname', type = str,
                    help = 'output file, will be zipped if the input is zipped')
parser.add_argument('-s', dest = 'start', type = int, default = 0,
                    help = 'the starting index of substring.')
parser.add_argument('-l', dest = 'length', type = int,
                    help = 'the length of substring.')
parser.add_argument('-x', default = False, action = 'store_true', dest = 'gzipped',
                    help = 'explicitly specify whether the file is zipped archive.')

params = parser.parse_args()

if params.fname.endswith('gz'):
    params.gzipped = True


def write_sub(fname, start, length, ofname, encoding = 'utf-8'):
    
    with open(fname, 'r', encoding = encoding) as f:
        with open(ofname, 'w', encoding = encoding) as of:
            return write_sub_fp(f, start, length, of)
    
    pass

def write_sub_gzipped(fname, start, length, ofname, encoding = 'utf-8'):

    import gzip
    import io

    with gzip.open(fname, 'rb') as f:
        with io.TextIOWrapper(f, encoding = encoding) as enc:
            with gzip.open(ofname, 'wb') as of:
                with io.TextIOWrapper(of, encoding = encoding) as oenc:
                    return write_sub_fp(enc, start, length, oenc)

    pass

def write_sub_fp(fp, start, length, of):
    
    line = fp.readline() # note, a trailing \n will be there.
                         # do not process, to save time.
    lineno = 0

    while line:

        # process the lines

        mod = lineno % 4

        if mod == 0:
            of.write(line)
        
        elif (mod == 1) or (mod == 3):
            of.write(line[start, start + length] + '\n')
        
        else:
            of.write('+\n')

        line = fp.readline()
        lineno += 1
    
    return lineno

contents = None
if params.gzipped:
    lno = write_sub_gzipped(params.fname, params.start, params.length, params.oname)
else: lno = write_sub(params.fname, params.start, params.length, params.oname)

print(lno, "lines written")
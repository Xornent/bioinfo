#!/usr/bin/python

from Bio.Seq import Seq
import argparse
import pandas as pd
import matplotlib.pyplot as plt
import ctypes

import fq
from ansi import error

parser = argparse.ArgumentParser(
    prog = 'fq: fqvariant',
    description = 'calculate per-segment variation of fast-q sequences of a certain length'
)

parser.add_argument('fname', type = str,
                    help = 'input file, fastq file (can be gzipped).')
parser.add_argument('-x', default = False, action = 'store_true', dest = 'gzipped',
                    help = 'explicitly specify whether the file is zipped archive.')
parser.add_argument('-l', type = int, default = 100, dest = 'length',
                    help = 'length of the sequences to calculate.')
parser.add_argument('-s', type = int, default = 4, dest = 'segment',
                    help = 'alignment length of sub-segments.')
parser.add_argument('-c', type = int, default = 0, dest = 'scatter',
                    help = 'tolerance of scater.')
parser.add_argument('-t', type = int, default = 10, dest = 'threads',
                    help = 'number of parallel workers.')

params = parser.parse_args()

if params.fname.endswith('gz'):
    params.gzipped = True

contents = None
if params.gzipped: contents = fq.readfq_seqs_gzipped(params.fname)
else: contents = fq.readfq_seqs(params.fname)

if contents == None:
    error('read fastq file error.')

libfqvariant = ctypes.CDLL("./src/fqvariant/libfqvariant.so")
fqvariant = libfqvariant.fqvariant

rawstr = ''.join(contents['seqs']).encode('ascii')
lseq = ctypes.c_int(params.length)
lseg = ctypes.c_int(params.segment)
lsca = ctypes.c_int(params.scatter)
lthr = ctypes.c_int(params.threads)
leng = ctypes.c_int(len(contents['seqs']))

otype = ctypes.POINTER(ctypes.c_size_t)
fqvariant.restype = otype

out = fqvariant(lseq, lseg, lsca, lthr, ctypes.c_char_p(rawstr), leng, lseq)

plot_x = []
plot_y = []
for x in range(params.length - params.segment + 1):
    plot_x += [x]
    plot_y += [int(out[x])]

plt.plot(plot_x, plot_y, 'o')
plt.show()

                                    10x-3'
                                    ======

1   3'v1 protocol
=================

    the chromium single cell 3' solution v1 chemistry was used in the official 
    10x genomics publication by zheng et al., 2017 in nature communications. 
    <https://www.nature.com/articles/ncomms14049> it is now obsolete and 
    superseded by the later chemistries. i cannot find the exact sequence 
    information from the 10x website, so sequences shown here is based on 
    educational guess. based on their v1 manual pdf and actual data, i think the 
    information in this page is accurate. you can find out all the cell barcodes 
    (14 bp) here: <./v1-barcodes.txt.gz>. this file is copied from cell ranger 
    (using cell ranger v2.1.0 as an example) 
    <cellranger-2.1.0/cellranger-cs/2.1.0/tenkit/lib/python/tenkit/barcodes>.

    adapter and primer sequences:
    * (|) indicats beads.
    
    beads-oligo-dt: 

        |--5'- caagcagaagacggcatacgagat - [14-bp cell barcode] - ...
               gtgactggagttcagacgtgtgctcttccgatct - [10-bp umi] - (t)30 - vn -3'

    template switching oligo (tso): 

        5'- aagcagtggtatcaacgcagagtacatrgrgrg -3'

    ispcr:

        5'- aagcagtggtatcaacgcagagtacat -3'

    illumina truseq read 1 primer: 

        5'- acactctttccctacacgacgctcttccgatct -3'

    illumina truseq read 2 primer: 

        5'- gtgactggagttcagacgtgtgctcttccgatct -3'

    truseq adapter (double stranded dna with a t overhang):

        5'-  tctttccctacacgacgctcttccgatct -3'
                         3'- cgagaaggctag  -5'

    si-pcr primer: 
    
        5'- aatgatacggcgaccaccgagatctacac - [8-bp sample index] - ...
            acactctttccctacacgacgctcttccgatct -3'

    cell barcode sequencing primer (index1): 
    
        5'- gatcggaagagcacacgtctgaactccagtcac -3'

    sample index sequencing primer (index2): 
    
        5'- agatcggaagagcgtcgtgtagggaaagagtgt -3'

    illumina p5 adapter: 
    
        5'- aatgatacggcgaccaccgagatctacac -3'

    illumina p7 adapter: 
    
        5'- caagcagaagacggcatacgagat -3'

    
    1.1 library generation
    ======================

        (1) mrna capture using beads-oligo-dt in the droplets, and reverse 
            transcription using mmlv:

            5'- xxxxxxxxxxxxxxxxxxxxxB - (a)30 (the poly-a tail)
                           <--------NV - (t)30 - [10-bp umi] - tctagccttctcgtgtgcagacttgaggtcagtg - [14-bp cell barcode] - tagagcatacggcagaagacgaac -5'--|

        (2) the terminal tranferase acitivity of mmlv adds extra C-s:

            5'-    xxxxxxxxxxxxxxxxxxxxxb - (a)30
             CCC - xxxxxxxxxxxxxxxxxxxxnv - (t)30 - [10-bp umi] - tctagccttctcgtgtgcagacttgaggtcagtg - [14-bp cell barcode] - tagagcatacggcagaagacgaac -5'--|

        (3) adding tso for second strand synthesis:

                                                [=================================] (this is the target m-RNA)
            5'- AAGCAGTGGTATCAACGCAGAGTACATGGG - xxxxxxxxxxxxxxxxxxxxxb - (poly-a) ---------->
                               <---------- CCC - xxxxxxxxxxxxxxxxxxxxnv - (poly-t) - [10-bp umi] - tctagccttctcgtgtgcagacttgaggtcagtg - [14-bp cell barcode] - tagagcatacggcagaagacgaac -5'--|

        (4) adding ispcr and illumina p7 primers (this is presumably called 
            "cdna primer mix" in the pdf manual) to amplify full length cdna:

            5'- AAGCAGTGGTATCAACGCAGAGTACAT -------->
            5'- aagcagtggtatcaacgcagagtacatggg - xxxxxxxxxxxxxxxxxxxxxb - (poly-a) - [10-bp umi] - agatcggaagagcacacgtctgaactccagtcac - [14-bp cell barcode] - atctcgtatgccgtcttctgcttg -3'
            3'- ttcgtcaccatagttgcgtctcatgtaccc - xxxxxxxxxxxxxxxxxxxxnv - (poly-t) - [10-bp umi] - tctagccttctcgtgtgcagacttgaggtcagtg - [14-bp cell barcode] - tagagcatacggcagaagacgaac -5'--|
                                                                                                                                                  <-------- TAGAGCATACGGCAGAAGACGAAC -5'

        (5) use covaris to shear cdna and perform a-tailing:
            covaris is an ultrasound based dna breaker.

            product 1 (tso plus 5'-end of cdna):

            5'-      aagcagtggtatcaacgcagagtacatggg - xxxxxxxxxxxxxxxxxx ... xxxxxxxxxxxxxxxxxx - *A -3'
            3'- A* - ttcgtcaccatagttgcgtctcatgtaccc - xxxxxxxxxxxxxxxxxx ... xxxxxxxxxxxxxxxxxx      -5'

            product 2 (middle of cdna):

            5'-      xxxxxxxxxxxxxxxxxxxxxxxxx ... xxxxxxxxxxxxxxxxxxxxxxxxx - *a -3'
            3'- a* - xxxxxxxxxxxxxxxxxxxxxxxxx ... xxxxxxxxxxxxxxxxxxxxxxxxx      -5'

            product 3 (3' of cdna, umi, illumina truseq read 2 sequence, cell 
            barcode and illumina p7 sequence):

            5'-      xxxxx...xxxxxxb - (poly-a) - [10-bp umi] - agatcggaagagcacacgtctgaactccagtcac - [14-bp cell barcode] - atctcgtatgccgtcttctgcttg*a -3'
            3'- a* - xxxxx...xxxxxnv - (poly-t) - [10-bp umi] - tctagccttctcgtgtgcagacttgaggtcagtg - [14-bp cell barcode] - tagagcatacggcagaagacgaac -5'

        (6) add double stranded illumina truseq adapter (with a t overhang) 
            for ligation:

            product 1 (i assume the 5' end of tso is blocked, so the adapter 
            can only be ligated to the cdna end. this product is not amplifiable 
            due to the use of the specific primers for amplification, 
            see the next step):

            5'-      aagcagtggtatcaacgcagagtacatggg - xxxxxxxxxxxxxxxxxx ... xxxxxxxxxxxxxxxxxx - Agatcggaagagc -3'
            3'- a* - ttcgtcaccatagttgcgtctcatgtaccc - xxxxxxxxxxxxxxxxxx ... xxxxxxxxxxxxxxxxxx - tctagccttctcgcagcacatccctttct -5'

            product 2 (will not amplify efficiently due to semi-suppressive pcr??? 
            not really sure about this):

            5'- tctttccctacacgacgctcttccgatct - xxxxxxxxxxxxxxxxxxxx ... xxxxxxxxxxxxxxxxxxxx - Agatcggaagagc -3'
            3'-                 cgagaaggctagA - xxxxxxxxxxxxxxxxxxxx ... xxxxxxxxxxxxxxxxxxxx - tctagccttctcgcagcacatccctttct -5'

            product 3 (i assume the 5' end of illumina p7 primer is blocked, so 
            the adapter can only be ligated to the cdna end. this is the only 
            ampliable fragment):

            5'- tctttccctacacgacgctcttccgatct - xxxxxx...xxxxxxb - (poly-a) - [10-bp umi] - agatcggaagagcacacgtctgaactccagtcac - [14-bp cell barcode] - atctcgtatgccgtcttctgcttg*a -3'
            3'-                 cgagaaggctaga - xxxxxx...xxxxxnv - (poly-t) - [10-bp umi] - tctagccttctcgtgtgcagacttgaggtcagtg - [14-bp cell barcode] - tagagcatacggcagaagacgaac   -5'

        (7) add si-pcr primer and illumina p7 primer to index and amplify library:

            5'- aatgatacggcgaccaccgagatctacac - [8-bp sample index] - acactctttccctacacgacgctcttccgatct --------->
                                                                      5'- tctttccctacacgacgctcttccgatct - xxx ... xxxb - (poly-a) - [10-bp umi] - agatcggaagagcacacgtctgaactccagtcac - [14-bp cell barcode] - atctcgtatgccgtcttctgcttg*a -3'
                                                                      3'-                 cgagaaggctaga - xxx ... xxxv - (poly-t) - [10-bp umi] - tctagccttctcgtgtgcagacttgaggtcagtg - [14-bp cell barcode] - tagagcatacggcagaagacgaac   -5'
                                                                                                                                                                                                 <----------- tagagcatacggcagaagacgaac   -5'

        (8) final library structure:

            5'- aatgatacggcgaccaccgagatctacac - nnnnnnnn - acactctttccctacacgacgctcttccgatct - xxx ... xxxb - (poly-a) - nnnnnnnnnn - agatcggaagagcacacgtctgaactccagtcac - nnnnnnnnnnnnnn - atctcgtatgccgtcttctgcttg -3'
            3'- ttactatgccgctggtggctctagatgtg - nnnnnnnn - tgtgagaaagggatgtgctgcgagaaggctaga - xxx ... xxxv - (poly-t) - nnnnnnnnnn - tctagccttctcgtgtgcagacttgaggtcagtg - nnnnnnnnnnnnnn - tagagcatacggcagaagacgaac -5'
                <===========================>   <======>   <===============================>   <=====================>   <========>   <================================>   <============>   <======================>
                       illumina p5                8 bp              truseq read 1 -->                    cdna             10 bp umi              <-- truseq read 2        14 bp cell barcode       illumina p7
                                              sample index                                                                                           

    
    1.2 library sequencing
    ======================

        (1) add truseq read 1 primer to sequence the first read (bottom strand 
            as template, this the cdna read, 98  cycles):

            sequence region                                                                    <===98===>
            5'-                                            acactctttccctacacgacgctcttccgatct -------->
            3'- ttactatgccgctggtggctctagatgtg - nnnnnnnn - tgtgagaaagggatgtgctgcgagaaggctaga - xxx ... xxxv (poly-t) - nnnnnnnnnn - tctagccttctcgtgtgcagacttgaggtcagtg - nnnnnnnnnnnnnn - tagagcatacggcagaagacgaac -5'

        (2) add cell barcode sequencing primer to sequence the cell barcode 
            (bottom strand as template, in this case, cell barcode = i7 index, 14 cycles):

                                                                                                                                 5'- gatcggaagagcacacgtctgaactccagtcac -------------->
            3'- ttactatgccgctggtggctctagatgtg - nnnnnnnn - tgtgagaaagggatgtgctgcgagaaggctaga - xxx ... xxxv (poly-t) - nnnnnnnnnn - tctagccttctcgtgtgcagacttgaggtcagtg - nnnnnnnnnnnnnn - tagagcatacggcagaagacgaac -5'
            sequence region                                                                                                                                              <=====14=====>
        
        (3) cluster regeneration, add sample index sequencing primer (index2) to
            sequence the sample index (i5) (top strand as template, 8 cycles):

            sequence region                     <==8===>
            5'- aatgatacggcgaccaccgagatctacac - nnnnnnnn - acactctttccctacacgacgctcttccgatct - xxx ... xxxb (poly-a) - nnnnnnnnnn - agatcggaagagcacacgtctgaactccagtcac - nnnnnnnnnnnnnn - atctcgtatgccgtcttctgcttg -3'
                                                  <------- tgtgagaaagggatgtgctgcgagaaggctaga -5'

        (4) add truseq read 2 primer to sequence the umi (top strand as template, 
            sequence umi, 10 cycles):

            sequence region                                                                                            <===10===>
            5'- aatgatacggcgaccaccgagatctacac - nnnnnnnn - acactctttccctacacgacgctcttccgatct - xxx ... xxxb (poly-a) - nnnnnnnnnn - agatcggaagagcacacgtctgaactccagtcac - nnnnnnnnnnnnnn - atctcgtatgccgtcttctgcttg -3'
                                                                                                                         <--------- tctagccttctcgtgtgcagacttgaggtcagtg -5'
    
    1.3 pipeline
    ============

        the v1 chemistry is already obsolete, but i'm still providing the 
        preprocessing pipeline for the sake of keeping a record. although it is 
        highly unlikely that you will do this on your own in future, but just in 
        case, this is the configuration:

        Read	        Cycle	Description
        --------------- ------- ------------------------------------------------
        read 1	        >50	    normally yields r1_001.fastq.gz, cdna reads
        index 1 (i7)	14	    normally yields i1_001.fastq.gz, cell barcodes
        index 2 (i5)	8	    normally yields i2_001.fastq.gz, sample index
        read 2	        10	    normally yields r2_001.fastq.gz, umi

        look at the order of the sequencing, as you can see, the first (`r1`), 
        the 2nd (`i1`) and the 4th (`r2`) reads are all important for us. 
        therefore, you would like to get all of them for each sample based on 
        sample index, that is, the 3rd read (`i2`). you could prepare a 
        `samplesheet.csv` with the sample index information. here is an example 
        of `samplesheet.csv` of a nextseq run with a sample using standard `i5` 
        indexing primers:

        sample_id   i5_index_id     index2      sample_project  description
        ----------- --------------- ----------- --------------- ----------------
        sample01    si-ga-a1_1      aggctggt    
        sample01    si-ga-a1_2      cacaacta    
        sample01    si-ga-a1_3      gttggtcc    
        sample01    si-ga-a1_4      ttgtaaga    

        you can see each sample actually has four different index sequences. 
        this is because each well from the index plate actually contains four 
        different indices for base balancing. to get the reads you need, you 
        should run `bcl2fastq` in the following way:

            bcl2fastq --use-bases-mask=Y75,Y14,I8,Y10 \
                      --create-fastq-for-index-reads \
                      --no-lane-splitting \
                      --ignore-missing-positions \
                      --ignore-missing-controls \
                      --ignore-missing-filter \
                      --ignore-missing-bcls \
                      -r 4 -w 4 -p 4
        
        the important bit that needs explanation is 
        `--use-bases-mask=Y75,Y14,I8,Y10`. we have four reads, and that parameter 
        specify how we treat each read in the stated order:

        1. `y75` at the first position indicates "use the cycle as a real read", 
           so you will get 75-nt sequences, output as `r1_001.fastq.gz`, because 
           this is the 1st real read.

        2. `y14` at the second position indicates "use the cycle as a real read", 
           so you will get 14-nt sequences, output as `r2_001.fastq.gz`, 
           because this is the 2nd real read.

        3. `i8` at the third position indicates "use the cycle as an index read", 
           so you will get 8-nt sequences, output as `i1_001.fastq.gz`, because 
           this is the 1st index read, though it is the 3rd read overall.

        4. `y10` at the fourth position indicates "use the cycle as a real read", 
           so you will get 10-nt sequences, output as `r3_001.fastq.gz`, because 
           this is the 3rd real read, though it is the 4th read overall.

        therefore, you will get four fastq file per sample. using the examples 
        above, these are the files you should get:

            sample01_s1_i1_001.fastq.gz # 8 bp: sample index
            sample01_s1_r1_001.fastq.gz # 75 bp: cdna reads
            sample01_s1_r2_001.fastq.gz # 14 bp: cell barcodes
            sample01_s1_r3_001.fastq.gz # 10 bp: umi
        
        to run `starsolo`, we need to get the cell barcodes and the umi into the 
        same fastq file. this can be simply achieved by stitching `r2` and `r3` 
        together:

            paste <(zcat sample01_s1_r2_001.fastq.gz) \
                  <(zcat sample01_s1_r3_001.fastq.gz) | \
                  awk -f '\t' '{ if( nr % 4 == 1 || nr % 4 == 3 ) { print $1 } else { print $1 $2 } }' | \
                  gzip > sample01_s1_cb_umi.fastq.gz

        in reality, it is better to run `bcl2fastq` with the 
        `--create-fastq-for-index-reads` flag without a `samplesheet.csv`. you 
        should get four fastq files per experiment:

            undetermined_s0_i1_001.fastq.gz    # cell barcodes (14 bp)
            undetermined_s0_i2_001.fastq.gz    # sample index (8 bp)
            undetermined_s0_r1_001.fastq.gz    # cdna reads (98 bp)


    1.4 working with real files
    ===========================

        however, the files from the 10x website are __not__ like that because 
        they demultiplexed the sample based on `i2`. they used different sample 
        indices even though there is only one sample. the sample was also split 
        into different flow cells and lanes. that is why there are so many files, 
        but essentially, they are all from the same sample.

        we can safely ignore all the `i2` files, and just look at the `i1` 
        (cell barcodes) and `ra` (cdna + umi) files. if you look at the content 
        of any `ra` file, you will realise that they are interleaved `fastq` files, 
        containing cdna and umi reads next to each other. for example, these are 
        the first 16 lines (4 records) of an ra file:

            @NB500915:156:HYKFKBGXX:1:11101:14387:1086 1:N:0:0
            TTCCTGGCCGCCAGAAGATCCACATCTCAAAGAAGTGGGGCTTCACCAAGTTCAATGCTGATGAATTTGAAGACATGGTGGCTGAAAAGCGGCTCATC

            @NB500915:156:HYKFKBGXX:1:11101:14387:1086 4:N:0:0
            GCACGNGNTN

            @NB500915:156:HYKFKBGXX:1:11101:25884:1109 1:N:0:0
            GACCTTTTGGCATGGCCCAGACTGGGGTGCCCTTTGGGGAAGTAAGCATGGTCCGGGACTGGTTGGGCATTGTGGGGCGTGTGCTGACCCATACCCAA

            @NB500915:156:HYKFKBGXX:1:11101:25884:1109 4:N:0:0
            GTAGTTTTGG

        to use `starsolo`, we need to prepare `fastq` files into a file 
        containing cdna reads and a file with cell barcode + umi. to get the 
        cdna reads, we need every other read from the `ra` file.

        The barcodes on the gel beads of the 10x Genomics platform are well 
        defined. We need the information for the `V1` chemistry.

            <see ./v1-barcodes.txt.gz>

        now we could start the preprocessing by simply doing:
        
            STAR --runThreadN 4 \
                 --genomeDir ./../star_index \
                 --readFilesCommand zcat \
                 --outFileNamePrefix ./star_outs/ \
                 --readFilesIn cdna_reads.fastq.gz cb_umi_reads.fastq.gz \
                 --soloType CB_UMI_Simple \
                 --soloCBstart 1 --soloCBlen 14 --soloUMIstart 15 --soloUMIlen 10 \
                 --soloCBwhitelist v1-barcodes.txt \
                 --soloCellFilter EmptyDrops_CR \
                 --soloStrand Forward \
                 --outSAMattributes CB UB \
                 --outSAMtype BAM SortedByCoordinate

        `--soloType CB_UMI_Simple`

            most of the time, you should use this option, and specify the 
            configuration of cell barcodes and umi in the command line (see 
            immediately below). sometimes, it is actually easier to prepare 
            the cell barcode and umi file upfront so that we could use this 
            parameter. that is why went through those procedures to reformat 
            the `fastq` files.

        `--soloCBstart 1 --soloCBlen 14 --soloUMIstart 15 --soloUMIlen 10`

            the name of the parameter is pretty much self-explanatory. if using 
            `--solotype cb_umi_simple`, we can specify where the cell barcode 
            and umi start and how long they are in the reads from the first 
            file passed to `--readfilesin`. note the position is 1-based (the 
            first base of the read is 1, not 0).

        `--soloCBwhitelist v1-barcodes.txt`

            the plain text file containing all possible valid cell barcodes, 
            one per line. __10x genomics single cell 3' v1__ is a commercial 
            platform. the whitelist is taken from their `cellranger`.

        `--soloCellFilter EmptyDrops_CR`

            experiments are never perfect. even for droplets that do not contain 
            any cell, you may still get some reads. in general, the number of 
            reads from those droplets should be much smaller, often orders of 
            magnitude smaller, than those droplets with cells. in order to 
            identify true cells from the background, you can apply different 
            algorithms. check the `star` manual for more information. we use 
            `emptydrops_cr` which is the most frequently used parameter. 

        `--soloStrand Forward`

            the choice of this parameter depends on where the cdna reads come 
            from, i.e. the reads from the first file passed to `--readfilesin`. 
            you need to check the experimental protocol. if the cdna reads are 
            from the same strand as the mrna (the coding strand), this parameter 
            will be `forward` (this is the default). if they are from the 
            opposite strand as the mrna, which is often called the first strand, 
            this parameter will be `reverse`. in the case of 10x v1, the cdna 
            reads are from the read 1 file. during the experiment, the mrna 
            molecules are captured by barcoded oligo-dt primer containing the 
            illumina read 2 sequence. therefore, read 2 comes from the first 
            strand, complementary to the coding strand. read 1 comes from the 
            coding strand. therefore, use `forward` for 10x v1 data. 
            this `forward` parameter is the default, because many protocols 
            generate data like this, but i still specified it here to make it clear.

        `--outSAMattributes CB UB`

            we want the cell barcode and umi sequences in the `cb` and `ub` 
            attributes of the output, respectively. the information will be 
            very helpful for downstream analysis. 

        `--outSAMtype BAM SortedByCoordinate`

            we want sorted `bam` for easy handling by other programs.
#!/usr/bin/env Rscript

crlf <- "\n"

basewd <- "~/Documents/bioinfo/scrna"
setwd(basewd)

source("depends.R")
source("argparse.R")

system("clear")
cat(
  green("scrna"),
  "analyses of integrated single-cell rna sequencing dataset.", crlf, crlf
)

read <- function() {
  cat(crayon::green("$ "))
  readLines("stdin", n = 1, encoding = "utf-8")
}

# set working directory. ------------------------------------------------------

cat(stringr::str_wrap(indent = 0, exdent = 0, width = 80, paste(
  magenta("working directory:"), "all outputs and inputs will be read and/or",
  "write to this directory, enter . to keep as original"
)), crlf)

wd <- read()
setwd(wd)

cat(crlf, green("working directory set to"), italic(wd), crlf, crlf)

# preprocess data to obtain expr matrix, and two set of metadatas. ------------
# here, we can construct the single cell experiment object.

if (file.exists("features/sce-counts.rds")) {
  sce <- readRDS("features/sce-counts.rds")
} else {

  if (file.exists("features/matrix.rds") &&
        file.exists("features/genes-meta.rds") &&
        file.exists("features/samples-meta.rds")) {
    expr_count <- readRDS("features/matrix.rds")
    genes_meta <- readRDS("features/genes-meta.rds")
    sample_meta <- readRDS("features/samples-meta.rds")
  } else {
    source("preproc.R")
  }

  cat(green("expression matrix:"), crlf, crlf, sep = "")
  print(expr_count)

  cat(crlf, green("gene (row) metadata:"), crlf, crlf, sep = "")
  print(genes_meta)

  cat(crlf, green("sample (column) metadata:"), crlf, crlf, sep = "")
  print(sample_meta)

  sce <- SingleCellExperiment(assays = list(
    counts = expr_count |> as.matrix()
  ))

  colData(sce) <- sample_meta |> DataFrame()
  rowData(sce) <- genes_meta |> DataFrame()

  saveRDS(sce, "features/sce-counts.rds")
  rm(expr_count, genes_meta, sample_meta)
}

# before quality control, we do not generate Seurat object. since this work can
# be done using just single cell experiment.

# construct the shared object list:

shared <- list()
shared[["sce"]] <- sce
shared[["is_qc"]] <- FALSE
shared[["is_norm"]] <- FALSE

if (file.exists("qc/matrix.rds") &&
      file.exists("qc/genes-meta.rds") &&
      file.exists("qc/samples-meta.rds") &&
      file.exists("qc/sce-filtered.rds")) {
  shared[["is_qc"]] <- TRUE
}

if (file.exists("norm/linear.rds") &&
      file.exists("norm/log.rds") &&
      file.exists("norm/scaled.rds") &&
      file.exists("norm/config.rds")) {
  shared[["is_norm"]] <- TRUE
}

# main loop -------------------------------------------------------------------

invoke_command <- function(src, vargs) {
  tryCatch(
    source(paste(basewd, src, sep = "/")),
    error = function(e) { message(e); cat(crlf) }, # nolint
    finally = {}
  )
}

while (TRUE) {

  cat(crlf)
  command <- read()
  cat(crlf)

  if (command == "ls") print(ls())
  else if (command == "gc") print(gc())
  else if (command == "q") q()

  else { # nolint

    vargs <- str_split(command, " ")[[1]]
    if (length(vargs) < 1) {
      next
    } else {
      cmdtarget <- vargs[1]

      if (length(vargs) == 1) vargs <- c()
      else vargs <- vargs[2:length(vargs)]
      vargs <- vargs[!is.na(vargs)]

      suspected_file_name <- paste(cmdtarget, "R", sep = ".")
      suspected_fpath <- paste(basewd, suspected_file_name, sep = "/")
      if (file.exists(suspected_fpath))
        invoke_command(suspected_file_name, vargs)
      rm(suspected_file_name, suspected_fpath)
    }

  } # end of non-built in command list
}
